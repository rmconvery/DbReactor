name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Run tests
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal --logger trx --results-directory "TestResults" --collect:"XPlat Code Coverage"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/*.trx
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: TestResults/*/coverage.cobertura.xml

  build-packages:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    
    strategy:
      matrix:
        project: 
          - { name: "DbReactor.Core", path: "DbReactor.Core/DbReactor.Core.csproj" }
          - { name: "DbReactor.MSSqlServer", path: "DbReactor.MSSqlServer/DbReactor.MSSqlServer.csproj" }
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ matrix.project.path }}
    
    - name: Build project
      run: dotnet build ${{ matrix.project.path }} --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Create NuGet package (CI build)
      run: |
        # Create version with build number for CI
        CI_VERSION="1.0.0-ci-${{ github.run_number }}"
        sed -i "s/<Version>.*<\/Version>/<Version>$CI_VERSION<\/Version>/" ${{ matrix.project.path }}
        dotnet pack ${{ matrix.project.path }} --configuration ${{ env.CONFIGURATION }} --no-build --output ./ci-packages
    
    - name: Upload CI packages
      uses: actions/upload-artifact@v4
      with:
        name: ci-packages-${{ matrix.project.name }}
        path: ./ci-packages/*.nupkg

  validate-packages:
    runs-on: ubuntu-latest
    needs: build-packages
    if: success()
    
    steps:
    - name: Download all CI packages
      uses: actions/download-artifact@v4
      with:
        pattern: ci-packages-*
        path: ./all-packages
        merge-multiple: true
    
    - name: List and validate packages
      run: |
        echo "Built packages:"
        ls -la ./all-packages/
        
        echo ""
        echo "Package validation:"
        for package in ./all-packages/*.nupkg; do
          if [ -f "$package" ]; then
            echo "✓ Package exists: $(basename "$package")"
            
            # Check if it's a valid zip file (NuGet packages are zip files)
            if unzip -t "$package" > /dev/null 2>&1; then
              echo "✓ Package structure is valid"
            else
              echo "✗ Package structure is invalid"
              exit 1
            fi
            
            # Get package size
            size=$(stat -c%s "$package" 2>/dev/null || stat -f%z "$package" 2>/dev/null || echo "unknown")
            echo "  Size: $size bytes"
            echo ""
          fi
        done
        
        echo "All packages validated successfully!"