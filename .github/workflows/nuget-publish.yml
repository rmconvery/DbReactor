name: Publish to NuGet

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Run tests
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal --logger trx --results-directory "TestResults"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/*.trx

  publish-nuget:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    
    strategy:
      matrix:
        project: 
          - { name: "DbReactor.Core", path: "DbReactor.Core/DbReactor.Core.csproj" }
          - { name: "DbReactor.MSSqlServer", path: "DbReactor.MSSqlServer/DbReactor.MSSqlServer.csproj" }
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          PRERELEASE="${{ github.event.release.prerelease }}"
        else
          VERSION="${{ github.event.inputs.version }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "PRERELEASE=$PRERELEASE" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION (prerelease: $PRERELEASE)"
    
    - name: Update project version
      run: |
        # Update version in project file
        sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.VERSION }}<\/Version>/" ${{ matrix.project.path }}
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ steps.version.outputs.VERSION }}.0<\/AssemblyVersion>/" ${{ matrix.project.path }}
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ steps.version.outputs.VERSION }}.0<\/FileVersion>/" ${{ matrix.project.path }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ matrix.project.path }}
    
    - name: Build project
      run: dotnet build ${{ matrix.project.path }} --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Create NuGet package
      run: dotnet pack ${{ matrix.project.path }} --configuration ${{ env.CONFIGURATION }} --no-build --output ./nupkg
    
    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ matrix.project.name }}
        path: ./nupkg/*.nupkg
    
    - name: Publish to NuGet.org
      run: dotnet nuget push "./nupkg/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      if: steps.version.outputs.PRERELEASE == 'false'
    
    - name: Publish to NuGet.org (Prerelease)
      run: dotnet nuget push "./nupkg/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      if: steps.version.outputs.PRERELEASE == 'true'

  create-github-release:
    runs-on: ubuntu-latest
    needs: publish-nuget
    if: github.event_name == 'workflow_dispatch' && success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## DbReactor v${{ github.event.inputs.version }}
          
          ### Packages Published
          - DbReactor.Core v${{ github.event.inputs.version }}
          - DbReactor.MSSqlServer v${{ github.event.inputs.version }}
          
          ### Installation
          ```bash
          dotnet add package DbReactor.Core --version ${{ github.event.inputs.version }}
          dotnet add package DbReactor.MSSqlServer --version ${{ github.event.inputs.version }}
          ```
          
          For release notes and changes, see the documentation.
        files: |
          ./artifacts/**/*.nupkg
        prerelease: ${{ github.event.inputs.prerelease }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}